// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model User {
  id        Int      @id @default(autoincrement())
  phone     String?  @unique
  email     String?  @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens     Token[]
  products Product[]
  fav       Fav[]
  userDetail UserDetail?
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId    Int

  @@index([userId])
}

model Product {
  id       Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
  user      User     @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId    Int
  image     String
  name      String
  price     Int 
  description String @db.MediumText
  Fav         Fav[]
  Categories  Category[]

  @@index([userId])
}

model UserDetail {
  id       Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId    Int     @unique
  firstName String?
  lastName String?
  phone String? 
  phoneExtension String?
  email String? 
  address String?
  city String?
  province String?
  postCode String?

  @@index([userId])
 }


model Fav {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@index([userId])
  @@index([productId])
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@index([productId])
}